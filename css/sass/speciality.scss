/**
 nested
*/
#main p {
  color: #00ff00;
  width: 97%;

  .redbox {
    background-color: #ff0000;
    color: #000000;
  }
}

// &
a {
  font-weight: bold;
  text-decoration: none;
  &:hover {
    text-decoration: underline;
  }
  body.firefox & {
    font-weight: normal;
  }
}

#main {
  color: black;
  a {
    font-weight: bold;
    &:hover {
      color: red;
    }
  }
}

#main {
  color: black;
  &-sidebar {
    border: 1px solid;
  }
}

// nested properties
.funky {
  font: {
    family: fantasy;
    size: 30em;
    weight: bold;
  }
}

.funky {
  font: 20px/24px fantasy {
    weight: bold;
  }
}

/*
* comments
*/
// These comments are only one lone long each.
// They won't appear in the css output,
// since they use the single-line comment syntax.
a {
  color: green;
}

$version: "1.2.3";
/*! This CSS is generated by My Snazzy Framework version #{$version}. */

/*
* SassScript
*/

// Variables:$
$main-width: 5em;
#main {
  width: $main-width;
}

#main {
  $width: 3em !global;
  width: $width;
}

#sidebar {
  width: $width;
}

//Data type: string
@mixin firefox-message($selector) {
  body.firefox #{$selector}:before {
    content: "Hi, Firefox users!";
  }
}

@include firefox-message(".header");

//Data type:List
//Data type:Maps
//Data type:Colors
//First Class Functions
//  get-function($function-name) call($function,$args...)

//Operations

// Number Operarions
p {
  font: 10px/8px;
  $width: 1000px;
  width: $width/2;
  width: round(1.5) / 2;
  height: (500px/2);
  margin-left: 5px+8px/2px;
  font: (italic bold 10px/8px);
  font-size: (50/2) px;
}

//color operations
p {
  color: rgb(255, 255, 255);
}

$translucent-red: rgba(255, 0, 0, 0.5);
p {
  color: opacify($translucent-red, 0.3);
  background-color: transparentize($translucent-red, 0.25);
}

//string operations
p {
  cursor: e + -resize;
}

p {
  margin: 3px+4px auto;
}

p:before {
  content: "I ate #{5+10} pies!";
}

$value: null;
p:before {
  content: "I ate #{$value} pies!";
}

//Boolean operations
// and, or, not

//List operations
// list functions

//parentheses
p {
  width: 1em + (2em * 3);
}

//functions
p {
  color: hsl(0, 100%, 50%);
}

p {
  color: hsl($hue: 0, $saturation: 100%, $lightness: 50%);
}

//interpolation:#{}
$name: foo;
$attr: border;
p.#{$name} {
  #{$attr}-color: blue;
}

p {
  $font-size: 12px;
  $line-height: 30px;
  font: #{$font-size} / #{$line-height};
}

// & in SassScript
.foo.bar .baz.bang,
.bip.qux {
  $selector: &;
}

@mixin does-parent-exist {
  @if & {
    &:hover {
      color: red;
    }
  } @else {
    a {
      color: red;
    }
  }
}

// Variable Defaults:!default
$content: "First content";
$content: "Second content ?" !default;
$new_content: "First time reference" !default;

#main {
  content: $content;
  new-content: $new_content;
}

/*
* @-Rules and Directives
*/

// @import
@import "foo.css";
@import "foo" screen;
@import "http://foo.com/bar";
@import url(foo);

$family: unquote(
  $string: "Droid+Sans"
);

@import url("http://fonts.googleapis.com/css?family=#{$family}");

// partials

// nested @import
#main {
  @import "example";
}

// @media
.sidebar {
  width: 300px;
  @media screen and (orientation: landscape) {
    width: 500px;
  }
}

@media screen {
  .sidebar {
    @media (orientation: landscape) {
      width: 500px;
    }
  }
}

$media: screen;
$feature: -webkit-min-device-pixel-ratio;
$value: 1.5;

@media #{$media} and ($feature:$value) {
  .sidebar {
    width: 500px;
  }
}

// @extend

.error {
  border: 1px #f00;
  background-color: #fdd;
}

.error.intrusion {
  background-image: url("/image/hacked.png");
}

.seriousError {
  @extend .error;
  border-width: 3px;
}

.error {
  border: 1px #f00;
  background-color: #fdd;
}
.attention {
  font-size: 3em;
  background-color: #ff0;
}
.seriousError {
  @extend .error;
  @extend .attention;
  border-width: 3px;
}

.error {
  border: 1px #f00;
  background-color: #fdd;
}
.seriousError {
  @extend .error;
  border-width: 3px;
}
.criticalError {
  @extend .seriousError;
  position: fixed;
  top: 10%;
  bottom: 10%;
  left: 10%;
  right: 10%;
}
